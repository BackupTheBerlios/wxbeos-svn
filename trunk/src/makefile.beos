## ********************************* ##
## ZETA Generic Makefile v3.0        ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.

NETLIBS=socket bind
STDCPPLIB=stdc++.r4

## Application Specific Settings ---------------------------------------------

# specify the name of the binary
NAME := libwx.so

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
#	MODULE: Kernel Module
#	DECOR:	A window decorator project
TYPE := SHARED

#	add support for new Pe and Eddie features
#	to fill in generic makefile

#%{
# @src->@ 

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
UNUSED_YET := \
	beos/accel.cpp \
	beos/busyinfo.cpp \
	beos/calctrl.cpp \
	beos/caret.cpp \
	beos/choicbkg.cpp \
	beos/choicdgg.cpp \
	beos/colrdlgg.cpp \
	beos/datectlg.cpp \
	beos/dbgrptg.cpp \
	beos/dcpsg.cpp \
	beos/dirctrlg.cpp \
	beos/dirdlgg.cpp \
	beos/dragimgg.cpp \
	beos/extended.cpp \
	beos/fdrepdlg.cpp \
	beos/filedlgg.cpp \
	beos/fontdlgg.cpp \
	beos/frame_1.cpp \
	beos/grid.cpp \
	beos/gridctrl.cpp \
	beos/gridsel.cpp \
	beos/helpext.cpp \
	beos/htmllbox.cpp \
	beos/imaglist.cpp \
	beos/listbkg.cpp \
	beos/listctrl.cpp \
	beos/mdig.cpp \
	beos/notebook.cpp \
	beos/numdlgg.cpp \
	beos/paletteg.cpp \
	beos/printps.cpp \
	beos/prntdlgg.cpp \
	beos/progdlgg.cpp \
	beos/propdlg.cpp \
	beos/regiong.cpp \
	beos/sashwin.cpp \
	beos/scrlwing.cpp \
	beos/spinctlg.cpp \
	beos/splash.cpp \
	beos/splitter.cpp \
	beos/statbmp.cpp \
	beos/statline.cpp \
	beos/statusbr.cpp \
	beos/tabg.cpp \
	beos/textdlgg.cpp \
	beos/theme.cpp \
	beos/timer.cpp \
	beos/tipdlg.cpp \
	beos/tipwin.cpp \
	beos/treectlg.cpp \
	beos/vlbox.cpp \
	beos/wizard.cpp \

SRCS := \
	common/appbase.cpp \
	common/appcmn.cpp \
	common/archive.cpp \
	common/artprov.cpp \
	common/artstd.cpp \
	common/bmpbase.cpp \
	common/clntdata.cpp \
	common/cmdline.cpp \
	common/config.cpp \
	common/containr.cpp \
	common/ctrlcmn.cpp \
	common/datacmn.cpp \
	common/datetime.cpp \
	common/datstrm.cpp \
	common/dcbase.cpp \
	common/dircmn.cpp \
	common/dlgcmn.cpp \
	common/dynarray.cpp \
	common/encconv.cpp \
	common/event.cpp \
	common/ffile.cpp \
	common/file.cpp \
	common/fileconf.cpp \
	common/filefn.cpp \
	common/filename.cpp \
	common/filesys.cpp \
	common/fontcmn.cpp \
	common/framecmn.cpp \
	common/fs_mem.cpp \
	common/fs_zip.cpp \
	common/gdicmn.cpp \
	common/hash.cpp \
	common/hashmap.cpp \
	common/imagbmp.cpp \
	common/image.cpp \
	common/imagfill.cpp \
	common/init.cpp \
	common/ipcbase.cpp \
	common/list.cpp \
	common/log.cpp \
	common/longlong.cpp \
	common/menucmn.cpp \
	common/mimecmn.cpp \
	common/module.cpp \
	common/msgout.cpp \
	common/mstream.cpp \
	common/object.cpp \
	common/process.cpp \
	common/quantize.cpp \
	common/regex.cpp \
	common/sizer.cpp \
	common/sstream.cpp \
	common/statbar.cpp \
	common/stdpbase.cpp \
	common/stopwatch.cpp \
	common/strconv.cpp \
	common/stream.cpp \
	common/string.cpp \
	common/sysopt.cpp \
	common/textbuf.cpp \
	common/textcmn.cpp \
	common/textfile.cpp \
	common/tokenzr.cpp \
	common/toplvcmn.cpp \
	common/txtstrm.cpp \
	common/uri.cpp \
	common/utilscmn.cpp \
	common/variant.cpp \
	common/wfstream.cpp \
	common/wincmn.cpp \
	common/wxchar.cpp \
	common/zipstrm.cpp \
	common/zstream.cpp \
	common/iconbndl.cpp \
	beos/app.cpp \
	beos/backview.cpp \
	beos/basebeos.cpp \
	beos/bitmap.cpp \
	beos/brush.cpp \
	beos/colour.cpp \
	beos/control.cpp \
	beos/cursor.cpp \
	beos/dc.cpp \
	beos/dcclient.cpp \
	beos/dcmemory.cpp \
	beos/dialog.cpp \
	beos/dir.cpp \
	beos/evtloop.cpp \
	beos/font.cpp \
	beos/fontutil.cpp \
	beos/frame.cpp \
	beos/gdiimage.cpp \
	beos/gdiobj.cpp \
	beos/icon.cpp \
	beos/laywin.cpp \
	beos/logg.cpp \
	beos/menu.cpp \
	beos/menuitem.cpp \
	beos/mimetype.cpp \
	beos/msgdlg.cpp \
	beos/msgdlgg.cpp \
	beos/natwnd.cpp \
	beos/panelg.cpp \
	beos/pen.cpp \
	beos/region.cpp \
	beos/renderg.cpp \
	beos/selstore.cpp \
	beos/settings.cpp \
	beos/statbrbeos.cpp \
	beos/stdpaths.cpp \
	beos/textctrl.cpp \
	beos/toplevel.cpp \
	beos/utilsbeos.cpp \
	beos/vscroll.cpp \
	beos/window.cpp \


#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS :=

#	Specify your RDEF files, if any.
RDEFS :=

# @<-src@ 
#%}

#	end support for Pe and Eddie

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS :=  be $(NETLIBS) z $(STDCPPLIB)

#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS := 

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS := 

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS := \
	$(CURDIR)/../include \
	common \
	$(CURDIR)/../lib \
	expat/lib \
	beos \
	univ \
	generic \
	gtk \
	$(CURDIR)/../include/wx/beos \
	

#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE	:=

#	specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES		:= \
	WXMAKINGDLL_BASE \
	wxUSE_BASE=1 \

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS	:= 

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS		:=

#	specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER	:= 

#	specify additional compiler flags for all files
COMPILER_FLAGS	:=

#	specify additional linker flags
LINKER_FLAGS	:=

#	specify the version of this particular item
#	(for example, -app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL") 
#E	This may also be specified in a resource.
APP_VERSION	:= 

#	(for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH	:= 

#	Specify if you want the object files to be somewhere besides the default location.
OBJ_DIR		:=

#	Specify a non default placement for the target
TARGET_DIR	:=

#	Specify a directory for the 'install' target.
INSTALL_DIR	:=
 
#	Specify the name of this makefile.
#	If you leave this blank, the makefile will not be considered as part of the
#	dependenies for the project, and the project will not be rebuilt when the makefile
#	is changed
MAKEFILE	:= 

#	Specify TRUE if you want the install target to create links in the BeMenu
MENU_LINKS	:= 

#	Related to MENU_LINKS, specify the name of the direcotry in the BeMenu
#	you wish the link to go in. If the directory does not exist, it will be
#	created.
APP_MENU	:= 

#       If, for some reason, you don't want to use the dependencies (flex and yacc seem to choke 
#       on them), set this to false 
DODEPS		:= 

#	Set this variable if you have an svg text file you wish to use as your targets
#	icon.
SVG_ICON	:=

#	If you have some fancy custom build steps to do, specify them here
EXTRA_BUILD_STEPS	=

#	If you have some other files that should trigger a re-link, such as libs in the same
#	project that may get rebuilt, specify the full path to them here.
EXTRA_DEPS :=

###########################################################################################
# The following variables are commented out here because the can be very useful to just 
# set at the command line or in the env at time of compiling, allowing you to leave your 
# makefile the same, but change the build types easily.


#	If you wish to have the program output a profiling session file which can be read by bprof,
#	set this to 'true'
#BUILD_PROFILE	:=

#	If you wish to have a debug build,
#	set this to 'true'
#BUILD_DEBUG	:=

#	If you wish to have a build which can do memory checking when MALLOC_DEBUG=15 is set,
#	set this to 'true'
#CHECK_MEM		:=

#	If you want to see the complete build line for every file, then set this to 'true',
#	otherwise it will tell you at the end what the build flags were.
#CHATTY			:=



## include the makefile-engine
include $(BUILDHOME)/etc/makefile-engine
## ********************************* ##
## ZETA Generic Makefile v3.0        ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.

NETLIBS=socket bind
STDCPPLIB=stdc++.r4

## Application Specific Settings ---------------------------------------------

# specify the name of the binary
NAME := libwx.so

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
#	MODULE: Kernel Module
#	DECOR:	A window decorator project
TYPE := SHARED

#	add support for new Pe and Eddie features
#	to fill in generic makefile

#%{
# @src->@ 

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
UNUSED_YET := \
	beos/accel.cpp \
	beos/busyinfo.cpp \
	beos/calctrl.cpp \
	beos/caret.cpp \
	beos/choicbkg.cpp \
	beos/choicdgg.cpp \
	beos/colrdlgg.cpp \
	beos/datectlg.cpp \
	beos/dbgrptg.cpp \
	beos/dcpsg.cpp \
	beos/dirctrlg.cpp \
	beos/dirdlgg.cpp \
	beos/dragimgg.cpp \
	beos/extended.cpp \
	beos/fdrepdlg.cpp \
	beos/filedlgg.cpp \
	beos/fontdlgg.cpp \
	beos/frame_1.cpp \
	beos/grid.cpp \
	beos/gridctrl.cpp \
	beos/gridsel.cpp \
	beos/helpext.cpp \
	beos/htmllbox.cpp \
	beos/imaglist.cpp \
	beos/listbkg.cpp \
	beos/listctrl.cpp \
	beos/mdig.cpp \
	beos/notebook.cpp \
	beos/numdlgg.cpp \
	beos/paletteg.cpp \
	beos/printps.cpp \
	beos/prntdlgg.cpp \
	beos/progdlgg.cpp \
	beos/propdlg.cpp \
	beos/regiong.cpp \
	beos/sashwin.cpp \
	beos/scrlwing.cpp \
	beos/spinctlg.cpp \
	beos/splash.cpp \
	beos/splitter.cpp \
	beos/statbmp.cpp \
	beos/statline.cpp \
	beos/statusbr.cpp \
	beos/tabg.cpp \
	beos/textdlgg.cpp \
	beos/theme.cpp \
	beos/timer.cpp \
	beos/tipdlg.cpp \
	beos/tipwin.cpp \
	beos/treectlg.cpp \
	beos/vlbox.cpp \
	beos/wizard.cpp \

SRCS := \
	common/appbase.cpp \
	common/appcmn.cpp \
	common/archive.cpp \
	common/artprov.cpp \
	common/artstd.cpp \
	common/bmpbase.cpp \
	common/clntdata.cpp \
	common/cmdline.cpp \
	common/config.cpp \
	common/containr.cpp \
	common/ctrlcmn.cpp \
	common/datacmn.cpp \
	common/datetime.cpp \
	common/datstrm.cpp \
	common/dcbase.cpp \
	common/dircmn.cpp \
	common/dlgcmn.cpp \
	common/dynarray.cpp \
	common/encconv.cpp \
	common/event.cpp \
	common/ffile.cpp \
	common/file.cpp \
	common/fileconf.cpp \
	common/filefn.cpp \
	common/filename.cpp \
	common/filesys.cpp \
	common/fontcmn.cpp \
	common/framecmn.cpp \
	common/fs_mem.cpp \
	common/fs_zip.cpp \
	common/gdicmn.cpp \
	common/hash.cpp \
	common/hashmap.cpp \
	common/imagbmp.cpp \
	common/image.cpp \
	common/imagfill.cpp \
	common/init.cpp \
	common/ipcbase.cpp \
	common/list.cpp \
	common/log.cpp \
	common/longlong.cpp \
	common/menucmn.cpp \
	common/mimecmn.cpp \
	common/module.cpp \
	common/msgout.cpp \
	common/mstream.cpp \
	common/object.cpp \
	common/process.cpp \
	common/quantize.cpp \
	common/regex.cpp \
	common/sizer.cpp \
	common/sstream.cpp \
	common/statbar.cpp \
	common/stdpbase.cpp \
	common/stopwatch.cpp \
	common/strconv.cpp \
	common/stream.cpp \
	common/string.cpp \
	common/sysopt.cpp \
	common/textbuf.cpp \
	common/textcmn.cpp \
	common/textfile.cpp \
	common/tokenzr.cpp \
	common/toplvcmn.cpp \
	common/txtstrm.cpp \
	common/uri.cpp \
	common/utilscmn.cpp \
	common/variant.cpp \
	common/wfstream.cpp \
	common/wincmn.cpp \
	common/wxchar.cpp \
	common/zipstrm.cpp \
	common/zstream.cpp \
	common/iconbndl.cpp \
	beos/app.cpp \
	beos/backview.cpp \
	beos/basebeos.cpp \
	beos/bitmap.cpp \
	beos/brush.cpp \
	beos/colour.cpp \
	beos/control.cpp \
	beos/cursor.cpp \
	beos/dc.cpp \
	beos/dcclient.cpp \
	beos/dcmemory.cpp \
	beos/dialog.cpp \
	beos/dir.cpp \
	beos/evtloop.cpp \
	beos/font.cpp \
	beos/fontutil.cpp \
	beos/frame.cpp \
	beos/gdiimage.cpp \
	beos/gdiobj.cpp \
	beos/icon.cpp \
	beos/laywin.cpp \
	beos/logg.cpp \
	beos/menu.cpp \
	beos/menuitem.cpp \
	beos/mimetype.cpp \
	beos/msgdlg.cpp \
	beos/msgdlgg.cpp \
	beos/natwnd.cpp \
	beos/panelg.cpp \
	beos/pen.cpp \
	beos/region.cpp \
	beos/renderg.cpp \
	beos/selstore.cpp \
	beos/settings.cpp \
	beos/statbrbeos.cpp \
	beos/stdpaths.cpp \
	beos/textctrl.cpp \
	beos/toplevel.cpp \
	beos/utilsbeos.cpp \
	beos/vscroll.cpp \
	beos/window.cpp \


#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS :=

#	Specify your RDEF files, if any.
RDEFS :=

# @<-src@ 
#%}

#	end support for Pe and Eddie

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS :=  be $(NETLIBS) z $(STDCPPLIB)

#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS := 

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS := 

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS := \
	$(CURDIR)/../include \
	common \
	$(CURDIR)/../lib \
	expat/lib \
	beos \
	univ \
	generic \
	gtk \
	$(CURDIR)/../include/wx/beos \
	

#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE	:=

#	specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES		:= \
	WXMAKINGDLL_BASE \
	wxUSE_BASE=1 \

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS	:= 

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS		:=

#	specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER	:= 

#	specify additional compiler flags for all files
COMPILER_FLAGS	:=

#	specify additional linker flags
LINKER_FLAGS	:=

#	specify the version of this particular item
#	(for example, -app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL") 
#E	This may also be specified in a resource.
APP_VERSION	:= 

#	(for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH	:= 

#	Specify if you want the object files to be somewhere besides the default location.
OBJ_DIR		:=

#	Specify a non default placement for the target
TARGET_DIR	:=

#	Specify a directory for the 'install' target.
INSTALL_DIR	:=
 
#	Specify the name of this makefile.
#	If you leave this blank, the makefile will not be considered as part of the
#	dependenies for the project, and the project will not be rebuilt when the makefile
#	is changed
MAKEFILE	:= 

#	Specify TRUE if you want the install target to create links in the BeMenu
MENU_LINKS	:= 

#	Related to MENU_LINKS, specify the name of the direcotry in the BeMenu
#	you wish the link to go in. If the directory does not exist, it will be
#	created.
APP_MENU	:= 

#       If, for some reason, you don't want to use the dependencies (flex and yacc seem to choke 
#       on them), set this to false 
DODEPS		:= 

#	Set this variable if you have an svg text file you wish to use as your targets
#	icon.
SVG_ICON	:=

#	If you have some fancy custom build steps to do, specify them here
EXTRA_BUILD_STEPS	=

#	If you have some other files that should trigger a re-link, such as libs in the same
#	project that may get rebuilt, specify the full path to them here.
EXTRA_DEPS :=

###########################################################################################
# The following variables are commented out here because the can be very useful to just 
# set at the command line or in the env at time of compiling, allowing you to leave your 
# makefile the same, but change the build types easily.


#	If you wish to have the program output a profiling session file which can be read by bprof,
#	set this to 'true'
#BUILD_PROFILE	:=

#	If you wish to have a debug build,
#	set this to 'true'
#BUILD_DEBUG	:=

#	If you wish to have a build which can do memory checking when MALLOC_DEBUG=15 is set,
#	set this to 'true'
#CHECK_MEM		:=

#	If you want to see the complete build line for every file, then set this to 'true',
#	otherwise it will tell you at the end what the build flags were.
#CHATTY			:=



## include the makefile-engine
include $(BUILDHOME)/etc/makefile-engine
## ********************************* ##
## ZETA Generic Makefile v3.0        ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.

NETLIBS=socket bind
STDCPPLIB=stdc++.r4

## Application Specific Settings ---------------------------------------------

# specify the name of the binary
NAME := libwx.so

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
#	MODULE: Kernel Module
#	DECOR:	A window decorator project
TYPE := SHARED

#	add support for new Pe and Eddie features
#	to fill in generic makefile

#%{
# @src->@ 

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
UNUSED_YET := \
	beos/accel.cpp \
	beos/busyinfo.cpp \
	beos/calctrl.cpp \
	beos/caret.cpp \
	beos/choicbkg.cpp \
	beos/choicdgg.cpp \
	beos/colrdlgg.cpp \
	beos/datectlg.cpp \
	beos/dbgrptg.cpp \
	beos/dcpsg.cpp \
	beos/dirctrlg.cpp \
	beos/dirdlgg.cpp \
	beos/dragimgg.cpp \
	beos/extended.cpp \
	beos/fdrepdlg.cpp \
	beos/filedlgg.cpp \
	beos/fontdlgg.cpp \
	beos/frame_1.cpp \
	beos/grid.cpp \
	beos/gridctrl.cpp \
	beos/gridsel.cpp \
	beos/helpext.cpp \
	beos/htmllbox.cpp \
	beos/imaglist.cpp \
	beos/listbkg.cpp \
	beos/listctrl.cpp \
	beos/mdig.cpp \
	beos/notebook.cpp \
	beos/numdlgg.cpp \
	beos/paletteg.cpp \
	beos/printps.cpp \
	beos/prntdlgg.cpp \
	beos/progdlgg.cpp \
	beos/propdlg.cpp \
	beos/regiong.cpp \
	beos/sashwin.cpp \
	beos/scrlwing.cpp \
	beos/spinctlg.cpp \
	beos/splash.cpp \
	beos/splitter.cpp \
	beos/statbmp.cpp \
	beos/statline.cpp \
	beos/statusbr.cpp \
	beos/tabg.cpp \
	beos/textdlgg.cpp \
	beos/theme.cpp \
	beos/timer.cpp \
	beos/tipdlg.cpp \
	beos/tipwin.cpp \
	beos/treectlg.cpp \
	beos/vlbox.cpp \
	beos/wizard.cpp \

SRCS := \
	common/appbase.cpp \
	common/appcmn.cpp \
	common/archive.cpp \
	common/artprov.cpp \
	common/artstd.cpp \
	common/bmpbase.cpp \
	common/clntdata.cpp \
	common/cmdline.cpp \
	common/config.cpp \
	common/containr.cpp \
	common/ctrlcmn.cpp \
	common/datacmn.cpp \
	common/datetime.cpp \
	common/datstrm.cpp \
	common/dcbase.cpp \
	common/dircmn.cpp \
	common/dlgcmn.cpp \
	common/dynarray.cpp \
	common/encconv.cpp \
	common/event.cpp \
	common/ffile.cpp \
	common/file.cpp \
	common/fileconf.cpp \
	common/filefn.cpp \
	common/filename.cpp \
	common/filesys.cpp \
	common/fontcmn.cpp \
	common/framecmn.cpp \
	common/fs_mem.cpp \
	common/fs_zip.cpp \
	common/gdicmn.cpp \
	common/hash.cpp \
	common/hashmap.cpp \
	common/imagbmp.cpp \
	common/image.cpp \
	common/imagfill.cpp \
	common/init.cpp \
	common/ipcbase.cpp \
	common/list.cpp \
	common/log.cpp \
	common/longlong.cpp \
	common/menucmn.cpp \
	common/mimecmn.cpp \
	common/module.cpp \
	common/msgout.cpp \
	common/mstream.cpp \
	common/object.cpp \
	common/process.cpp \
	common/quantize.cpp \
	common/regex.cpp \
	common/sizer.cpp \
	common/sstream.cpp \
	common/statbar.cpp \
	common/stdpbase.cpp \
	common/stopwatch.cpp \
	common/strconv.cpp \
	common/stream.cpp \
	common/string.cpp \
	common/sysopt.cpp \
	common/textbuf.cpp \
	common/textcmn.cpp \
	common/textfile.cpp \
	common/tokenzr.cpp \
	common/toplvcmn.cpp \
	common/txtstrm.cpp \
	common/uri.cpp \
	common/utilscmn.cpp \
	common/variant.cpp \
	common/wfstream.cpp \
	common/wincmn.cpp \
	common/wxchar.cpp \
	common/zipstrm.cpp \
	common/zstream.cpp \
	common/iconbndl.cpp \
	beos/app.cpp \
	beos/backview.cpp \
	beos/basebeos.cpp \
	beos/bitmap.cpp \
	beos/brush.cpp \
	beos/colour.cpp \
	beos/control.cpp \
	beos/cursor.cpp \
	beos/dc.cpp \
	beos/dcclient.cpp \
	beos/dcmemory.cpp \
	beos/dialog.cpp \
	beos/dir.cpp \
	beos/evtloop.cpp \
	beos/font.cpp \
	beos/fontutil.cpp \
	beos/frame.cpp \
	beos/gdiimage.cpp \
	beos/gdiobj.cpp \
	beos/icon.cpp \
	beos/laywin.cpp \
	beos/logg.cpp \
	beos/menu.cpp \
	beos/menuitem.cpp \
	beos/mimetype.cpp \
	beos/msgdlg.cpp \
	beos/msgdlgg.cpp \
	beos/natwnd.cpp \
	beos/panelg.cpp \
	beos/pen.cpp \
	beos/region.cpp \
	beos/renderg.cpp \
	beos/selstore.cpp \
	beos/settings.cpp \
	beos/statbrbeos.cpp \
	beos/stdpaths.cpp \
	beos/textctrl.cpp \
	beos/toplevel.cpp \
	beos/utilsbeos.cpp \
	beos/vscroll.cpp \
	beos/window.cpp \


#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS :=

#	Specify your RDEF files, if any.
RDEFS :=

# @<-src@ 
#%}

#	end support for Pe and Eddie

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS :=  be $(NETLIBS) z $(STDCPPLIB)

#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS := 

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS := 

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS := \
	$(CURDIR)/../include \
	common \
	$(CURDIR)/../lib \
	expat/lib \
	beos \
	univ \
	generic \
	gtk \
	$(CURDIR)/../include/wx/beos \
	

#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE	:=

#	specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES		:= \
	WXMAKINGDLL_BASE \
	wxUSE_BASE=1 \

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS	:= 

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS		:=

#	specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER	:= 

#	specify additional compiler flags for all files
COMPILER_FLAGS	:=

#	specify additional linker flags
LINKER_FLAGS	:=

#	specify the version of this particular item
#	(for example, -app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL") 
#E	This may also be specified in a resource.
APP_VERSION	:= 

#	(for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH	:= 

#	Specify if you want the object files to be somewhere besides the default location.
OBJ_DIR		:=

#	Specify a non default placement for the target
TARGET_DIR	:=

#	Specify a directory for the 'install' target.
INSTALL_DIR	:=
 
#	Specify the name of this makefile.
#	If you leave this blank, the makefile will not be considered as part of the
#	dependenies for the project, and the project will not be rebuilt when the makefile
#	is changed
MAKEFILE	:= 

#	Specify TRUE if you want the install target to create links in the BeMenu
MENU_LINKS	:= 

#	Related to MENU_LINKS, specify the name of the direcotry in the BeMenu
#	you wish the link to go in. If the directory does not exist, it will be
#	created.
APP_MENU	:= 

#       If, for some reason, you don't want to use the dependencies (flex and yacc seem to choke 
#       on them), set this to false 
DODEPS		:= 

#	Set this variable if you have an svg text file you wish to use as your targets
#	icon.
SVG_ICON	:=

#	If you have some fancy custom build steps to do, specify them here
EXTRA_BUILD_STEPS	=

#	If you have some other files that should trigger a re-link, such as libs in the same
#	project that may get rebuilt, specify the full path to them here.
EXTRA_DEPS :=

###########################################################################################
# The following variables are commented out here because the can be very useful to just 
# set at the command line or in the env at time of compiling, allowing you to leave your 
# makefile the same, but change the build types easily.


#	If you wish to have the program output a profiling session file which can be read by bprof,
#	set this to 'true'
#BUILD_PROFILE	:=

#	If you wish to have a debug build,
#	set this to 'true'
#BUILD_DEBUG	:=

#	If you wish to have a build which can do memory checking when MALLOC_DEBUG=15 is set,
#	set this to 'true'
#CHECK_MEM		:=

#	If you want to see the complete build line for every file, then set this to 'true',
#	otherwise it will tell you at the end what the build flags were.
#CHATTY			:=



## include the makefile-engine
include $(BUILDHOME)/etc/makefile-engine
